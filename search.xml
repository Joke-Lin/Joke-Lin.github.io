<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>埃氏筛 &amp; 欧拉筛</title>
    <url>/2020/03/24/2020-03-24-prime-sieve%20/</url>
    <content><![CDATA[<blockquote>
<p>素数的定义：指在大于1的自然数中，除了1和该数自身外，无法被其他自然数整除的数。大于1的自然数若不是素数，则称之为合数。</p>
</blockquote>
<h2 id="试除法">试除法</h2>
<p>直接使用定义解决的方案。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; <span class="built_in">sqrt</span>(n);i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n % i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里从2遍历到<span class="math inline">\(\sqrt n\)</span> 因为之后的就没有必要了，一个和数拆分成两个因子必定是在<span class="math inline">\(\sqrt n\)</span>的两侧，是对称的，所以只需要遍历一边就可以了。</p>
<a id="more"></a>
<h2 id="埃氏筛">埃氏筛</h2>
<p>上面的算法是判断一个数是否是素数，但是对获取某个范围的素数开销非常大。埃氏筛（素数筛）就是求某个范围素数的算法。</p>
<p>原理很简单，合数必定可以拆分为一系列素数的积，即<strong>某个素数的任意倍数都是合数</strong>。</p>
<p>代码也很简单：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// maxn 为范围的上届</span></span><br><span class="line"><span class="keyword">bool</span> is_prime[maxn] = &#123;<span class="literal">true</span>&#125;; <span class="comment">// 初始化为全部 true</span></span><br><span class="line">is_prime[<span class="number">0</span>] = is_prime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> prime_numbers[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; maxn;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(is_prime[i]) &#123;</span><br><span class="line">        prime_numbers[cnt++] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i*i;j &lt; maxn;j += i) &#123;</span><br><span class="line">            is_prime[j] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>复杂度为：<span class="math inline">\(n\log \log n\)</span></p>
<h2 id="欧拉筛">欧拉筛</h2>
<p>埃氏筛很明显的一个缺点就是一个合数会被重复筛掉（被每一个素数因子筛一次），增加复杂度。欧拉筛就是在其上的改进，使每一个合数只被它的最小因子筛掉。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> is_prime[maxn] = &#123;<span class="literal">true</span>&#125;; <span class="comment">// 初始化为全部 true</span></span><br><span class="line">is_prime[<span class="number">0</span>] = is_prime[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">int</span> prime_numbers[maxn];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;i &lt; maxn;i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(is_prime[i]) &#123;</span><br><span class="line">        prime_numbers[cnt++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;i*prime_numbers[j] &lt; maxn;j++) &#123;</span><br><span class="line">        is_prime[i*prime_numbers[j]] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(i % prime_numbers[j] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>欧拉筛复杂度为n（将空循环不视作开销），每个合数仅被筛一次。</p>
<p>核心就在于<code>i % prime_numbers[j] == 0</code>，当这个条件成立的时候跳出循环，不继续往下筛，下面的都是已经或者未来要被筛掉的。</p>
<p>条件成立时意味着 <span class="math inline">\(i = prime\_numbers[j] \times K\)</span>，而继续循环下去回得到<span class="math inline">\(i*prime\_numbers[j+1]\)</span>也就是,<span class="math inline">\(prime\_numbers[j]\times prime\_numbers[j+1] \times K = prime\_numbers[j] \times Q\)</span>，也就是说它会被<span class="math inline">\(prime\_numbers[j]\)</span>乘以另外一个数给筛掉，之后的循环也就没必要进行了。也保证了，每个合数都只被它的最小因子筛掉。</p>
<p>令<span class="math inline">\(N = K \times Q \times ...\)</span> K Q为两个素数且<span class="math inline">\(Q \gt K\)</span>，假设N可以被Q筛掉，也就是$N = Q M， M= K... $这里的M就是上面循环中的i，它是不可能使用QM筛掉的，因为<code>M%K == 0</code>，就跳出循环之外了。</p>
]]></content>
      <categories>
        <category>DSAA</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 爬取有道翻译</title>
    <url>/2018/09/18/2018-09-18-youdao/</url>
    <content><![CDATA[<h1 id="python-urllib-使用实例">Python urllib 使用实例</h1>
<p><a href="https://www.cnblogs.com/sss4/p/7809821.html" target="_blank" rel="noopener"><strong>爬虫原理</strong></a></p>
<blockquote>
<p>Attention: Python3 将urlib2 urlib3 结合为urlib</p>
</blockquote>
<ul>
<li><strong>Urlib</strong>:<span class="exturl" data-url="aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veGlhby1hcHBsZTM2L3AvODQzMzQwMC5odG1s" title="https://www.cnblogs.com/xiao-apple36/p/8433400.html">Python3中urllib详细使用方法(header,代理,超时,认证,异常处理)<i class="fa fa-external-link"></i></span></li>
<li><strong>urlib2</strong> :<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTA0MDk0NDUvYXJ0aWNsZS9kZXRhaWxzLzczNDM4ODE2" title="https://blog.csdn.net/u010409445/article/details/73438816">python urllib2详解及实例(从底层说起)<i class="fa fa-external-link"></i></span></li>
</ul>
<h2 id="基本原理">基本原理</h2>
<ul>
<li><p>通过给网页提供一个数据，然后获取其反馈</p></li>
<li>使用到的模块
<ul>
<li><strong>urllib.request:</strong> 访问网站，提出请求，获取反馈</li>
<li><strong>urllib.parse:</strong> 格式化请求数据</li>
<li><strong>json:</strong> 格式化反馈信息，使其格式化为字典</li>
</ul></li>
<li><p>新版有道翻译爬取实现比较复杂 这里是对老的版本的爬取</p></li>
</ul>
<h2 id="实现过程及代码">实现过程及代码</h2>
<h3 id="分步解释">分步解释</h3>
<p><strong>1.</strong> 获取处理翻译信息的网页（这里采用的是谷歌浏览器）<br />
打开有道翻译网页 进入开发者模式<br />
选择Network <img src="/assets/ArticleImg/2018/Youdao1.png" alt="Youdao1" /><br />
然后在左边的输入框随便输入一个单词 会发现多了很多文件 <img src="/assets/ArticleImg/2018/Youdao2.png" alt="Youdao2" /> <strong>Headers</strong> 里面就是我们需要发送给他的信息<br />
其中 <strong>Request Url</strong> 就是真正处理翻译的网页<br />
由于我们采用旧版所以将url里的 <strong>&quot;translate_o&quot;</strong> 改为 <strong>&quot;translate&quot;</strong></p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 真正翻译的网址 Request Url</span></span><br><span class="line">url = <span class="string">'http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule'</span></span><br></pre></td></tr></table></figure></p>
<p><strong>2.</strong> 发送信息包 如下 <img src="/assets/ArticleImg/2018/Youdao3.png" alt="Youdao3" /> 将其包装成字典 并且格式化为网页可以识别的格式</p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建列表 模拟传入数据</span></span><br><span class="line">data = &#123;&#125;</span><br><span class="line">data[<span class="string">'i'</span>] = String</span><br><span class="line">data[<span class="string">'from'</span>] = <span class="string">'AUTO'</span></span><br><span class="line">data[<span class="string">'to'</span>] = <span class="string">'AUTO'</span></span><br><span class="line">data[<span class="string">'smartresult'</span>] = <span class="string">'dict'</span></span><br><span class="line">data[<span class="string">'client'</span>] = <span class="string">'fanyideskweb'</span></span><br><span class="line">data[<span class="string">'doctype'</span>] = <span class="string">'json'</span></span><br><span class="line">data[<span class="string">'version'</span>] = <span class="string">'2.1'</span></span><br><span class="line">data[<span class="string">'keyfrom'</span>] = <span class="string">'fanyi.web'</span></span><br><span class="line">data[<span class="string">'action'</span>] = <span class="string">'FY_BY_REALTIME'</span></span><br><span class="line">data[<span class="string">'typoResult'</span>] = <span class="string">'false'</span></span><br><span class="line"><span class="comment">#该变格式</span></span><br><span class="line">data = urllib.parse.urlencode(data).encode(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure></p>
<p><strong>3.</strong> 获取反馈并处理<br />
<img src="/assets/ArticleImg/2018/Youdao4.png" alt="Youdao4" /></p>
<p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = urllib.request.urlopen(url, data)  <span class="comment"># 得到回复</span></span><br><span class="line">html = response.read().decode(<span class="string">'utf-8'</span>)  <span class="comment"># 重新编码</span></span><br><span class="line">result = json.loads(html)  <span class="comment"># json 字典化</span></span><br><span class="line"><span class="comment"># return result["translateResult"][0][0]["tgt"] 返回结果</span></span><br></pre></td></tr></table></figure></p>
<h3 id="全部代码如下">全部代码如下</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    Author: Joke-R</span></span><br><span class="line"><span class="string">    IDE: python3.6</span></span><br><span class="line"><span class="string">    Purpose: translate words by youdao</span></span><br><span class="line"><span class="string">    Time: 2018-09-18</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Translate</span><span class="params">(String)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">        String: str</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 真正翻译的网址 Request Url</span></span><br><span class="line">    url = <span class="string">'http://fanyi.youdao.com/translate?smartresult=dict&amp;smartresult=rule'</span></span><br><span class="line">    <span class="comment"># 新建列表 模拟传入数据</span></span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    data[<span class="string">'i'</span>] = String</span><br><span class="line">    data[<span class="string">'from'</span>] = <span class="string">'AUTO'</span></span><br><span class="line">    data[<span class="string">'to'</span>] = <span class="string">'AUTO'</span></span><br><span class="line">    data[<span class="string">'smartresult'</span>] = <span class="string">'dict'</span></span><br><span class="line">    data[<span class="string">'client'</span>] = <span class="string">'fanyideskweb'</span></span><br><span class="line">    data[<span class="string">'doctype'</span>] = <span class="string">'json'</span></span><br><span class="line">    data[<span class="string">'version'</span>] = <span class="string">'2.1'</span></span><br><span class="line">    data[<span class="string">'keyfrom'</span>] = <span class="string">'fanyi.web'</span></span><br><span class="line">    data[<span class="string">'action'</span>] = <span class="string">'FY_BY_REALTIME'</span></span><br><span class="line">    data[<span class="string">'typoResult'</span>] = <span class="string">'false'</span></span><br><span class="line"></span><br><span class="line">    data = urllib.parse.urlencode(data).encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    response = urllib.request.urlopen(url, data)  <span class="comment"># 得到回复</span></span><br><span class="line">    html = response.read().decode(<span class="string">'utf-8'</span>)  <span class="comment"># 重新编码</span></span><br><span class="line">    result = json.loads(html)  <span class="comment"># json 字典化</span></span><br><span class="line">    <span class="keyword">return</span> result[<span class="string">"translateResult"</span>][<span class="number">0</span>][<span class="number">0</span>][<span class="string">"tgt"</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(__doc__)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            String = input(<span class="string">"please input a string:\n"</span>)</span><br><span class="line">            print(<span class="string">"result:"</span>, Translate(String))</span><br><span class="line">        <span class="keyword">except</span> BaseException <span class="keyword">as</span> reason:</span><br><span class="line">            print(reason + <span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫</category>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Retro Snake Easyx版本</title>
    <url>/2018/09/15/2018-09-15-Retro-Snake/</url>
    <content><![CDATA[<h2 id="部分文件说明">部分文件说明</h2>
<h3 id="snakeprev.h"><strong>Snakeprev.h</strong></h3>
<ol type="1">
<li>蛇节点声明 <code>struct snake;</code></li>
<li>蛇存储结构链表 <code>snake * snakelist(int,int*);</code></li>
<li>增加节点方法 <code>void addsnake(snake *);</code></li>
<li>绘画蛇身 <code>void drawsnake(snake *,char);</code></li>
<li>清空蛇 <code>void clearsnake(snake *);</code></li>
</ol>
<h3 id="mapgraph.h"><strong>mapgraph.h</strong></h3>
<p>主要是页面布局 背景（box map)的制作 布局</p>
<h3 id="main.cpp"><strong>main.cpp</strong></h3>
<p>主要方法如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">welcomegraph</span><span class="params">()</span></span>;<span class="comment">//欢迎界面</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Finish</span><span class="params">()</span></span>;<span class="comment">//结束界面</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">clickcontrol</span><span class="params">()</span></span>;<span class="comment">//鼠标控制</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Movingsnake</span><span class="params">(<span class="keyword">char</span>)</span></span>;<span class="comment">//蛇身移动控制</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Changesnakebody</span><span class="params">(<span class="keyword">int</span> ,<span class="keyword">int</span> )</span></span>;<span class="comment">//蛇身改变控制</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Eating</span><span class="params">()</span></span>;<span class="comment">//吃到食物的操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Deadjudge</span><span class="params">()</span></span>;<span class="comment">//死亡判断</span></span><br></pre></td></tr></table></figure>
<h3 id="运行截图">运行截图</h3>
<ul>
<li><strong>Start</strong></li>
</ul>
<figure>
<img src="https://github.com/LWJ9527/Retro-Snake/blob/master/%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA/start.png?raw=true" alt="Start" /><figcaption>Start</figcaption>
</figure>
<ul>
<li><strong>Run</strong></li>
</ul>
<figure>
<img src="https://github.com/LWJ9527/Retro-Snake/blob/master/%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA/run.png?raw=true" alt="Run" /><figcaption>Run</figcaption>
</figure>
<ul>
<li><strong>Over</strong></li>
</ul>
<figure>
<img src="https://github.com/LWJ9527/Retro-Snake/blob/master/%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA/over.png?raw=true" alt="Over" /><figcaption>Over</figcaption>
</figure>
<h3 id="注意事项及运行说明">注意事项及运行说明</h3>
<p><strong>WASD：</strong>　来操控蛇的上下左右移动 注意打开英文输入<br />
<strong>初始界面：</strong> 用户名及密码只是模拟 回车键确定输入<br />
<strong>EXE目录：</strong> exe文件在debug目录下 release发布因为其优化运行出错<br />
<strong>源代码下载：</strong> <code>https://github.com/LWJ9527/Retro-Snake.git</code><br />
<strong>C控制台源代码：</strong> <code>https://blog.csdn.net/qq_40953281/article/details/79315254</code><br />
<strong>To Be Continue...</strong> &gt; Easyx 下载地址 <code>https://www.easyx.cn/downloads/</code><br />
&gt; 更新 2018-9-10</p>
]]></content>
      <categories>
        <category>Game</category>
      </categories>
      <tags>
        <tag>C/C++</tag>
      </tags>
  </entry>
</search>
